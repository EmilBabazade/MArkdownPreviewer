{"version":3,"sources":["App.js","placeholderText.js","index.js"],"names":["BORDER_COLOR","useStyles","createUseStyles","body","overflowX","container","width","height","margin","padding","backgroundColor","content","position","top","display","flexFlow","pane","transition","border","boxShadow","textContainer","markdownArea","extend","resize","outline","previewArea","overflow","paneHeader","justifyContent","alignContent","borderBottom","fontFamily","arrow","borderWidth","cursor","rightArrow","transform","leftArrow","hiddenArrow","hiddenPane","App","useState","editor","setEditor","preview","setPreview","fullScreen","setFullScreen","useEffect","clean","DOMPurify","sanitize","marked","styles","editorButtonStyle","setEditorButtonStyle","previewButtonStyle","setPreviewButtonStyle","editorStyle","previewStyle","className","style","onClick","value","onChange","evt","input","target","cleanInput","dangerouslySetInnerHTML","__html","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2a277d01.chunk.js","sourcesContent":["/* TODO: \n  initial styling - DONE\n  states - DONE\n  markdown - DONE\n  better styling\n    window title bars for editor and preview - DONE\n    button to make full screen - DONE\n    pane header font - DONE\n    animations for width change - DONE\n    borders - DONE\n    shadows - DONE\n    arrow images for buttons - DONE\n    stack panes vertically for mobile - DONE\n  tab title - DONE\n  logo - DONE\n  test\n*/\n\nimport React, {useState, useEffect} from 'react'\nimport {createUseStyles} from 'react-jss'\nimport marked from 'marked'\nimport DOMPurify from 'dompurify'\nimport initialText from './placeholderText'\nimport 'jss-plugin-global'\n\nconst containerBackground = '#87b5b5'\nconst paneHeaderBackground = '#4aa3a3' \nconst textContainerBackground = '#c0d8d8'\nconst textContainerHeight = 95\nconst ANIMATION_DURATION_SECONDS = 1\nconst BORDER_COLOR = '#000000'\n\nconst useStyles = createUseStyles({\n    '@global': {\n        body: {\n            overflowX: 'hidden'\n        }\n    },\n    container: {\n        width: '100%',\n        height: '100%',\n        margin: '0',\n        padding: '0',\n        backgroundColor: containerBackground\n    },\n    content: {\n        position: 'absolute',\n        height: '80%',\n        width: '100%',\n        top: '10%',\n        display: 'flex',\n        flexFlow: 'row',\n\n        // stack panes vertically on mobile and make it fullscreen\n        '@media screen and (max-width: 650px)': {\n            flexFlow: 'column',\n            height: '100%',\n            top: 0\n        }\n    },\n    pane: {\n        width: '50%',\n        height: '100%',\n        margin: '0',\n        backgroundColor: '#ffffff',\n        transition: `width ${ANIMATION_DURATION_SECONDS}s`,\n        border: `solid 1px ${BORDER_COLOR}`,\n        boxShadow: '2px 2px 5px black',\n\n        // stack panes vertically on mobile and make it fullscreen\n        '@media screen and (max-width: 650px)': {\n            width: '100%',\n            height: '50%',\n            transition: 'none' // don't need width animations on mobile, since it will be full screen\n        }\n    },\n    textContainer: {\n        height: `${textContainerHeight}%`,\n        width: '100%',\n        padding: '10px',\n        backgroundColor: textContainerBackground\n    },\n    markdownArea: {\n        extend: 'textContainer',\n        resize: 'none',\n        outline: 'none',\n        border: 'none'\n    },\n    previewArea: {\n        extend: 'textContainer',\n        overflow: 'scroll'\n    },\n    paneHeader: {\n        width: '100%',\n        padding: '5px',\n        backgroundColor: paneHeaderBackground,\n        margin: 0,\n        display: 'flex',\n        flexFlow: 'row',\n        justifyContent: 'space-between',\n        alignContent: 'center',\n        borderBottom: `solid 1px ${BORDER_COLOR}`,\n        boxShadow: '-2px -2px 5px black',\n        '& *': {\n            margin: 0,\n            padding: 0,\n            fontFamily: 'Electrolize, sans-serif'\n        }\n    },\n    arrow: {\n        height: '100%',\n        border: 'solid black',\n        borderWidth: '0 3px 3px 0',\n        display: 'inline-block',\n        padding: '7px',\n        cursor: 'pointer',\n\n        // get rid of fullscreen functionality on mobile\n        '@media screen and (max-width: 650px)': {\n            display: 'none'\n        }\n    },\n    rightArrow: {\n        extend: 'arrow',\n        transform: 'rotate(-45deg)'\n    },\n    leftArrow: {\n        extend: 'arrow',\n        transform: 'rotate(135deg)'\n    },\n    hiddenArrow: {\n        display: 'none'\n    },\n    hiddenPane: {\n        width: '0%'\n    }\n})\n\nconst App = () => {\n    const [editor, setEditor] = useState(initialText)\n    const [preview, setPreview] = useState('')\n    const [fullScreen, setFullScreen] = useState({\n        editor: false, preview: false\n    })\n\n    // initialize preview\n    useEffect(() => {\n        // sanitize\n        const clean = DOMPurify.sanitize(editor)\n        // render\n        setPreview(marked(clean))\n    },[])\n\n    const handleEditorText = (evt) => {\n        const input = evt.target.value\n        setEditor(input)\n        // sanitize\n        const cleanInput = DOMPurify.sanitize(input)\n        // render\n        setPreview(marked(cleanInput))\n    }\n\n    //make fullscreen on buttonpress\n    const styles = useStyles()\n    \n    const [editorButtonStyle, setEditorButtonStyle] = useState(styles.rightArrow)\n    const [previewButtonStyle, setPreviewButtonStyle] = useState(styles.leftArrow)\n\n    let editorStyle = {}\n    let previewStyle = {}\n\n    // editor fullscreen preview hide\n    if(fullScreen.editor && !fullScreen.preview) {\n        editorStyle = {\n            width: '100%'\n        }\n        previewStyle = {\n            width: '0%'\n        }\n    }\n\n    // preview fullscreen editor hide\n    if(fullScreen.preview && !fullScreen.editor) {\n        previewStyle = {\n            width: '100%'\n        }\n        editorStyle = {\n            width: '0%'\n        }\n    }\n    \n    // change fullscreen state for above to work\n    // change arrows\n    const handleEditorFullScreen = () => {\n        if(!fullScreen.editor) {\n            setFullScreen({editor: true, preview: false})\n            setEditorButtonStyle(styles.leftArrow)\n            setPreviewButtonStyle(styles.hiddenArrow)\n        }\n        else {\n            setFullScreen({editor: false, preview: false})\n            setEditorButtonStyle(styles.rightArrow)\n            setPreviewButtonStyle(styles.leftArrow)\n        }\n    }\n\n    const handlePreviewerFullScreen = () => {\n        if(!fullScreen.preview) {\n            setFullScreen({editor: false, preview: true})\n            setPreviewButtonStyle(styles.rightArrow)\n            setEditorButtonStyle(styles.hiddenArrow)\n        }\n        else {\n            setFullScreen({editor: false, preview:false})\n            setPreviewButtonStyle(styles.leftArrow)\n            setEditorButtonStyle(styles.rightArrow)\n        }\n    }\n    \n    return (\n        <div className={styles.container}>\n            <div className={styles.content}>\n                <div className={styles.pane} style={editorStyle}>\n                    <div className={styles.paneHeader}>\n                        <p>Editor</p>\n                        <i className={editorButtonStyle} onClick={handleEditorFullScreen}></i>\n                    </div>\n                    <textarea value={editor} onChange={handleEditorText} className={styles.markdownArea}/>\n                </div>\n                {/* already sanitized */}\n                <div className={styles.pane} style={previewStyle}>\n                    <div className={styles.paneHeader}>\n                        <i className={previewButtonStyle} onClick={handlePreviewerFullScreen}></i>\n                        <p>Previewer</p>\n                    </div>\n                    <div className={styles.previewArea} dangerouslySetInnerHTML={{\n                        __html: preview\n                    }} />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default App","export default `# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n\nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n\nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | -------------\nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want!\n1. And last but not least, let's not forget embedded images:\n\n![React Logo w/ Text](https://goo.gl/Umyytc)\n'`","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)"],"sourceRoot":""}